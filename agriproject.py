import streamlit as st
import os
import random
from googleapiclient.discovery import build
from dotenv import load_dotenv

load_dotenv()

# Set page config
st.set_page_config(page_title="Agri Chatbot", layout="centered")

# API Keys
YOUTUBE_API_KEY = os.getenv("YOUTUBE_API_KEY")

# YouTube search function
def fetch_youtube_videos(query):
    youtube = build("youtube", "v3", developerKey=YOUTUBE_API_KEY)
    request = youtube.search().list(part="snippet", maxResults=3, q=query)
    response = request.execute()
    return response.get("items", [])

# Language dictionary
language_options = {
    "English": {
        "select_language": "Select Language",
        "mode": "Choose Mode",
        "chat_mode": "Agriculture Chat",
        "predict_mode": "Plant Disease Prediction",
        "input_prompt": "Enter your question about agriculture:",
        "submit": "Submit",
        "result": "Chatbot Response:",
        "select_crop": "Select Crop",
        "select_disease": "Select Disease",
        "symptoms": "Symptoms",
        "cause": "Cause",
        "prevention": "Prevention",
        "pesticides": "Pesticides",
        "natural_pesticides": "Natural Pesticides",
        "chemical_pesticides": "Chemical Pesticides",
        "environmental_factors": "Environmental Factors",
        "precautions": "Precautions",
        "care_instructions": "Care Instructions",
        "encouragement": "Encouragement",
        "youtube_videos": "YouTube Videos"
    },
    "Telugu": {
        "select_language": "‡∞≠‡∞æ‡∞∑‡∞®‡±Å ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø",
        "mode": "‡∞Æ‡±ã‡∞°‡±ç‚Äå‡∞®‡±Å ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø",
        "chat_mode": "‡∞µ‡±ç‡∞Ø‡∞µ‡∞∏‡∞æ‡∞Ø‡∞Ç ‡∞ö‡∞æ‡∞ü‡±ç",
        "predict_mode": "‡∞Æ‡±ä‡∞ï‡±ç‡∞ï‡∞≤ ‡∞µ‡±ç‡∞Ø‡∞æ‡∞ß‡∞ø ‡∞Ö‡∞Ç‡∞ö‡∞®‡∞æ",
        "input_prompt": "‡∞µ‡±ç‡∞Ø‡∞µ‡∞∏‡∞æ‡∞Ø‡∞Ç‡∞™‡±à ‡∞Æ‡±Ä ‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞®‡∞®‡±Å ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø:",
        "submit": "‡∞∏‡∞¨‡±ç‡∞Æ‡∞ø‡∞ü‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
        "result": "‡∞¨‡±ã‡∞ü‡±Å ‡∞∏‡∞Æ‡∞æ‡∞ß‡∞æ‡∞®‡∞Ç:",
        "select_crop": "‡∞™‡∞Ç‡∞ü‡∞®‡±Å ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø",
        "select_disease": "‡∞∞‡±ã‡∞ó‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø",
        "symptoms": "‡∞≤‡∞ï‡±ç‡∞∑‡∞£‡∞æ‡∞≤‡±Å",
        "cause": "‡∞ï‡∞æ‡∞∞‡∞£‡∞Ç",
        "prevention": "‡∞®‡∞ø‡∞∞‡±ã‡∞ß‡∞ï ‡∞ö‡∞∞‡±ç‡∞Ø‡∞≤‡±Å",
        "pesticides": "‡∞™‡±Ü‡∞∏‡±ç‡∞ü‡∞ø‡∞∏‡±à‡∞°‡±ç‡∞≤‡±Å",
        "natural_pesticides": "‡∞∏‡∞æ‡∞ß‡∞æ‡∞∞‡∞£ ‡∞™‡±Ü‡∞∏‡±ç‡∞ü‡∞ø‡∞∏‡±à‡∞°‡±ç‡∞≤‡±Å",
        "chemical_pesticides": "‡∞∞‡∞∏‡∞æ‡∞Ø‡∞® ‡∞™‡±Ü‡∞∏‡±ç‡∞ü‡∞ø‡∞∏‡±à‡∞°‡±ç‡∞≤‡±Å",
        "environmental_factors": "‡∞™‡∞∞‡±ç‡∞Ø‡∞æ‡∞µ‡∞∞‡∞£ ‡∞™‡∞∞‡∞ø‡∞∏‡±ç‡∞•‡∞ø‡∞§‡±Å‡∞≤‡±Å",
        "precautions": "‡∞ú‡∞æ‡∞ó‡±ç‡∞∞‡∞§‡±ç‡∞§‡∞≤‡±Å",
        "care_instructions": "‡∞∂‡±ç‡∞∞‡∞¶‡±ç‡∞ß ‡∞∏‡±Ç‡∞ö‡∞®‡∞≤‡±Å",
        "encouragement": "‡∞ß‡±à‡∞∞‡±ç‡∞Ø‡∞Ç ‡∞ö‡±Ü‡∞™‡±ç‡∞™‡±Å",
        "youtube_videos": "‡∞Ø‡±Ç‡∞ü‡±ç‡∞Ø‡±Ç‡∞¨‡±ç ‡∞µ‡±Ä‡∞°‡∞ø‡∞Ø‡±ã‡∞≤‡±Å"
    },
    "Hindi": {
        "select_language": "‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç",
        "mode": "‡§Æ‡•ã‡§° ‡§ö‡•Å‡§®‡•á‡§Ç",
        "chat_mode": "‡§ï‡•É‡§∑‡§ø ‡§ö‡•à‡§ü",
        "predict_mode": "‡§´‡§∏‡§≤ ‡§∞‡•ã‡§ó ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø‡§µ‡§æ‡§£‡•Ä",
        "input_prompt": "‡§ï‡•É‡§∑‡§ø ‡§∏‡•á ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§Ö‡§™‡§®‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç:",
        "submit": "‡§∏‡§¨‡§Æ‡§ø‡§ü ‡§ï‡§∞‡•á‡§Ç",
        "result": "‡§ö‡•à‡§ü‡§¨‡•â‡§ü ‡§â‡§§‡•ç‡§§‡§∞:",
        "select_crop": "‡§´‡§∏‡§≤ ‡§ö‡•Å‡§®‡•á‡§Ç",
        "select_disease": "‡§∞‡•ã‡§ó ‡§ö‡•Å‡§®‡•á‡§Ç",
        "symptoms": "‡§≤‡§ï‡•ç‡§∑‡§£",
        "cause": "‡§ï‡§æ‡§∞‡§£",
        "prevention": "‡§∞‡•ã‡§ï‡§•‡§æ‡§Æ",
        "pesticides": "‡§ï‡•Ä‡§ü‡§®‡§æ‡§∂‡§ï",
        "natural_pesticides": "‡§™‡•ç‡§∞‡§æ‡§ï‡•É‡§§‡§ø‡§ï ‡§ï‡•Ä‡§ü‡§®‡§æ‡§∂‡§ï",
        "chemical_pesticides": "‡§∞‡§æ‡§∏‡§æ‡§Ø‡§®‡§ø‡§ï ‡§ï‡•Ä‡§ü‡§®‡§æ‡§∂‡§ï",
        "environmental_factors": "‡§™‡§∞‡•ç‡§Ø‡§æ‡§µ‡§∞‡§£‡•Ä‡§Ø ‡§ï‡§æ‡§∞‡§ï",
        "precautions": "‡§∏‡§æ‡§µ‡§ß‡§æ‡§®‡§ø‡§Ø‡§æ‡§Å",
        "care_instructions": "‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤ ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂",
        "encouragement": "‡§™‡•ç‡§∞‡•ã‡§§‡•ç‡§∏‡§æ‡§π‡§®",
        "youtube_videos": "‡§Ø‡•Ç‡§ü‡•ç‡§Ø‡•Ç‡§¨ ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã"
    }
}

# Mock disease suggestion function
def get_suggestions(crop, disease):
    return {
        "symptoms": f"{disease} symptoms in {crop} include wilting, spots, and yellowing.",
        "cause": f"{disease} is commonly caused by fungal or bacterial infections.",
        "prevention": "Regular monitoring and proper spacing help prevent disease spread.",
        "natural_pesticides": "Neem oil and garlic spray are effective natural pesticides.",
        "chemical_pesticides": "Use Mancozeb or Carbendazim as recommended.",
        "environmental_factors": "High humidity and poor drainage favor disease development.",
        "precautions": "Wear gloves and avoid waterlogging.",
        "care_instructions": "Improve soil drainage and avoid overhead irrigation.",
        "encouragement": "Timely care and treatment can save your crop!"
    }

# Gemini AI chat mock function
def gemini_ai_chat(prompt):
    return f"AI response to: {prompt}"

# UI
st.title("üåæ AI-based Agriculture Helper Chatbot")

language = st.selectbox("üåê Select Language", options=list(language_options.keys()))
labels = language_options[language]

mode = st.radio(f"üîç {labels['mode']}", [labels["chat_mode"], labels["predict_mode"]])

if mode == labels["chat_mode"]:
    query = st.text_input(labels["input_prompt"])
    if st.button(labels["submit"]):
        response = gemini_ai_chat(query)
        st.markdown(f"**{labels['result']}** {response}")

elif mode == labels["predict_mode"]:
    crop = st.selectbox(f"üå± {labels['select_crop']}", ["Tomato", "Potato", "Rice", "Wheat"])
    disease = st.selectbox(f"ü¶† {labels['select_disease']}", ["Leaf Blight", "Root Rot", "Powdery Mildew"])

    if st.button(labels["submit"]):
        suggestions = get_suggestions(crop, disease)

        st.markdown(f"**{labels['symptoms']}**")
        st.write(suggestions["symptoms"])

        st.markdown(f"**{labels['cause']}**")
        st.write(suggestions["cause"])

        st.markdown(f"**{labels['prevention']}**")
        st.write(suggestions["prevention"])

        st.markdown(f"**{labels['pesticides']}**")
        st.markdown(f"**{labels['natural_pesticides']}**")
        st.write(suggestions["natural_pesticides"])
        st.markdown(f"**{labels['chemical_pesticides']}**")
        st.write(suggestions["chemical_pesticides"])

        st.markdown(f"**{labels['environmental_factors']}**")
        st.write(suggestions["environmental_factors"])

        st.markdown(f"**{labels['precautions']}**")
        st.write(suggestions["precautions"])

        st.markdown(f"**{labels['care_instructions']}**")
        st.write(suggestions["care_instructions"])

        st.markdown(f"**{labels['encouragement']}**")
        st.write(suggestions["encouragement"])

        # YouTube Videos
        st.markdown(f"**{labels['youtube_videos']}**")
        videos = fetch_youtube_videos(f"{crop} {disease} treatment")
        for video in videos:
            video_id = video["id"].get("videoId")
            title = video["snippet"]["title"]
            if video_id:
                video_url = f"https://www.youtube.com/watch?v={video_id}"
                st.markdown(f"[{title}]({video_url})")
