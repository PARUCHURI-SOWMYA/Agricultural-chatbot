import streamlit as st
import google.generativeai as genai
import speech_recognition as sr
from gtts import gTTS
import os
from PIL import Image
import requests

# Set up Google API Key
GOOGLE_API_KEY = "YOUR_API_KEY"  # Replace with your actual API key
genai.configure(api_key=GOOGLE_API_KEY)

# YouTube API Key
YOUTUBE_API_KEY = "YOUR_API_KEY"  # Replace with your actual YouTube API key

# Initialize the Gemini model
model = genai.GenerativeModel('gemini-1.5-flash-002')

# Initialize speech recognizer
recognizer = sr.Recognizer()

# Language-specific labels and options
language_options = {
    "English": {
        "title": "üå± Smart Agriculture Chatbot",
        "choose_language": "Choose Language",
        "choose_mode": "Choose Mode",
        "modes": ["Agriculture Chat", "Disease Prediction"],
        "choose_topic": "Choose an Option",
        "sub_topics": {
            "Harvesting": ["Best Time to Harvest", "Harvesting Techniques", "Post-Harvest Handling"],
            "Planting": ["Seed Selection", "Planting Techniques", "Crop Rotation"],
            "Irrigation": ["Drip Irrigation", "Sprinkler Systems", "Water Management"],
            "Pest Control": ["Organic Pest Control", "Chemical Pest Control", "Integrated Pest Management"],
            "Soil Health": ["Soil Testing", "Fertilizer Application", "Soil Conservation"]
        },
        "input_label": "Ask me anything about {}:",
        "input_method_options": ["Type your question", "Speak your question"],
        "submit_button": "Submit",
        "audio_input_button": "Speak your question",
        "response_label": "Chatbot Response:",
        "audio_output_button": "Listen to the response",
        "disease_prediction": "Plant Disease Prediction",
        "upload_image": "Upload an image of your crop/plant",
        "predict_button": "Predict Disease",
        "crop_identification": "Plant Identification:",
        "disease_details": "Disease Details:",
        "symptoms": "Symptoms:",
        "cause": "Cause of the Disease:",
        "prevention": "Prevention Measures:",
        "pesticides": "Pesticide/Fungicide Recommendations:",
        "natural_pesticides": "Natural Pesticides:",
        "chemical_pesticides": "Chemical Pesticides:",
        "environmental_factors": "Suitable Environmental Factors:",
        "precautions": "Precautions to Take:",
        "care_instructions": "Care Instructions:",
        "visual_aids": "Visual Aids:",
        "youtube_videos": "YouTube Videos for Treatment and Prevention:",
        "encouragement": "Encouragement and Follow-up:"
    },
    "Telugu": {
        "title": "üå± ‡∞∏‡±ç‡∞Æ‡∞æ‡∞∞‡±ç‡∞ü‡±ç ‡∞µ‡±ç‡∞Ø‡∞µ‡∞∏‡∞æ‡∞Ø ‡∞ö‡∞æ‡∞ü‡±ç‚Äå‡∞¨‡∞æ‡∞ü‡±ç",
        "choose_language": "‡∞≠‡∞æ‡∞∑‡∞®‡±Å ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø",
        "choose_mode": "‡∞Æ‡±ã‡∞°‡±ç‚Äå‡∞®‡±Å ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø",
        "modes": ["‡∞µ‡±ç‡∞Ø‡∞µ‡∞∏‡∞æ‡∞Ø ‡∞ö‡∞æ‡∞ü‡±ç", "‡∞∞‡±ã‡∞ó ‡∞®‡∞ø‡∞∞‡±ç‡∞ß‡∞æ‡∞∞‡∞£"],
        "choose_topic": "‡∞é‡∞Ç‡∞™‡∞ø‡∞ï‡∞®‡±Å ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø",
        "sub_topics": {
            "‡∞™‡∞Ç‡∞ü ‡∞ï‡±ã‡∞§": ["‡∞™‡∞Ç‡∞ü ‡∞ï‡±ã‡∞§‡∞ï‡±Å ‡∞â‡∞§‡±ç‡∞§‡∞Æ ‡∞∏‡∞Æ‡∞Ø‡∞Ç", "‡∞™‡∞Ç‡∞ü ‡∞ï‡±ã‡∞§ ‡∞™‡∞¶‡±ç‡∞ß‡∞§‡±Å‡∞≤‡±Å", "‡∞™‡∞Ç‡∞ü ‡∞ï‡±ã‡∞§ ‡∞§‡∞∞‡±ç‡∞µ‡∞æ‡∞§ ‡∞®‡∞ø‡∞∞‡±ç‡∞µ‡∞π‡∞£"],
            "‡∞®‡∞æ‡∞ü‡∞°‡∞Ç": ["‡∞µ‡∞ø‡∞§‡±ç‡∞§‡∞®‡∞æ‡∞≤ ‡∞é‡∞Ç‡∞™‡∞ø‡∞ï", "‡∞®‡∞æ‡∞ü‡∞°‡∞Ç ‡∞™‡∞¶‡±ç‡∞ß‡∞§‡±Å‡∞≤‡±Å", "‡∞™‡∞Ç‡∞ü ‡∞Æ‡∞æ‡∞∞‡±ç‡∞™‡∞ø‡∞°‡∞ø"],
            "‡∞®‡±Ä‡∞ü‡∞ø‡∞™‡∞æ‡∞∞‡±Å‡∞¶‡∞≤": ["‡∞°‡±ç‡∞∞‡∞ø‡∞™‡±ç ‡∞á‡∞∞‡∞ø‡∞ó‡±á‡∞∑‡∞®‡±ç", "‡∞∏‡±ç‡∞™‡±ç‡∞∞‡∞ø‡∞Ç‡∞ï‡±ç‡∞≤‡∞∞‡±ç ‡∞µ‡±ç‡∞Ø‡∞µ‡∞∏‡±ç‡∞•‡∞≤‡±Å", "‡∞®‡±Ä‡∞ü‡∞ø ‡∞®‡∞ø‡∞∞‡±ç‡∞µ‡∞π‡∞£"],
            "‡∞ï‡±Ä‡∞ü‡∞ï ‡∞®‡∞ø‡∞Ø‡∞Ç‡∞§‡±ç‡∞∞‡∞£": ["‡∞∏‡±á‡∞Ç‡∞¶‡±ç‡∞∞‡±Ä‡∞Ø ‡∞ï‡±Ä‡∞ü‡∞ï ‡∞®‡∞ø‡∞Ø‡∞Ç‡∞§‡±ç‡∞∞‡∞£", "‡∞∞‡∞∏‡∞æ‡∞Ø‡∞® ‡∞ï‡±Ä‡∞ü‡∞ï ‡∞®‡∞ø‡∞Ø‡∞Ç‡∞§‡±ç‡∞∞‡∞£", "‡∞∏‡∞Æ‡∞ó‡±ç‡∞∞ ‡∞ï‡±Ä‡∞ü‡∞ï ‡∞®‡∞ø‡∞Ø‡∞Ç‡∞§‡±ç‡∞∞‡∞£"],
            "‡∞®‡±á‡∞≤ ‡∞Ü‡∞∞‡±ã‡∞ó‡±ç‡∞Ø‡∞Ç": ["‡∞®‡±á‡∞≤ ‡∞™‡∞∞‡±Ä‡∞ï‡±ç‡∞∑", "‡∞é‡∞∞‡±Å‡∞µ‡±Å ‡∞µ‡∞ø‡∞®‡∞ø‡∞Ø‡±ã‡∞ó‡∞Ç", "‡∞®‡±á‡∞≤ ‡∞∏‡∞Ç‡∞∞‡∞ï‡±ç‡∞∑‡∞£"]
        },
        "input_label": "{} ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø ‡∞è‡∞¶‡±à‡∞®‡∞æ ‡∞Ö‡∞°‡∞ó‡∞Ç‡∞°‡∞ø:",
        "input_method_options": ["‡∞Æ‡±Ä ‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞®‡∞®‡±Å ‡∞ü‡±à‡∞™‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø", "‡∞Æ‡±Ä ‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞®‡∞®‡±Å ‡∞Æ‡∞æ‡∞ü‡±ç‡∞≤‡∞æ‡∞°‡∞Ç‡∞°‡∞ø"],
        "submit_button": "‡∞∏‡∞Æ‡∞∞‡±ç‡∞™‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø",
        "audio_input_button": "‡∞Æ‡±Ä ‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞®‡∞®‡±Å ‡∞Æ‡∞æ‡∞ü‡±ç‡∞≤‡∞æ‡∞°‡∞Ç‡∞°‡∞ø",
        "response_label": "‡∞ö‡∞æ‡∞ü‡±ç‚Äå‡∞¨‡∞æ‡∞ü‡±ç ‡∞™‡±ç‡∞∞‡∞§‡∞ø‡∞∏‡±ç‡∞™‡∞Ç‡∞¶‡∞®:",
        "audio_output_button": "‡∞™‡±ç‡∞∞‡∞§‡∞ø‡∞∏‡±ç‡∞™‡∞Ç‡∞¶‡∞®‡∞®‡±Å ‡∞µ‡∞ø‡∞®‡∞Ç‡∞°‡∞ø",
        "disease_prediction": "‡∞™‡∞Ç‡∞ü ‡∞∞‡±ã‡∞ó ‡∞®‡∞ø‡∞∞‡±ç‡∞ß‡∞æ‡∞∞‡∞£",
        "upload_image": "‡∞Æ‡±Ä ‡∞™‡∞Ç‡∞ü/‡∞Æ‡±ä‡∞ï‡±ç‡∞ï ‡∞Ø‡±ä‡∞ï‡±ç‡∞ï ‡∞ö‡∞ø‡∞§‡±ç‡∞∞‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞Ö‡∞™‡±ç‚Äå‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
        "predict_button": "‡∞∞‡±ã‡∞ó‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞®‡∞ø‡∞∞‡±ç‡∞ß‡∞æ‡∞∞‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø",
        "crop_identification": "‡∞™‡∞Ç‡∞ü ‡∞ó‡±Å‡∞∞‡±ç‡∞§‡∞ø‡∞Ç‡∞™‡±Å:",
        "disease_details": "‡∞∞‡±ã‡∞ó ‡∞µ‡∞ø‡∞µ‡∞∞‡∞æ‡∞≤‡±Å:",
        "symptoms": "‡∞≤‡∞ï‡±ç‡∞∑‡∞£‡∞æ‡∞≤‡±Å:",
        "cause": "‡∞∞‡±ã‡∞ó ‡∞ï‡∞æ‡∞∞‡∞£‡∞æ‡∞≤‡±Å:",
        "prevention": "‡∞®‡∞ø‡∞µ‡∞æ‡∞∞‡∞£ ‡∞ö‡∞∞‡±ç‡∞Ø‡∞≤‡±Å:",
        "pesticides": "‡∞™‡±Å‡∞∞‡±Å‡∞ó‡±Å‡∞Æ‡∞Ç‡∞¶‡±Å‡∞≤‡±Å/‡∞´‡∞Ç‡∞ó‡∞ø‡∞∏‡±à‡∞°‡±ç ‡∞∏‡∞ø‡∞´‡∞æ‡∞∞‡±ç‡∞∏‡±Å‡∞≤‡±Å:",
        "natural_pesticides": "‡∞∏‡∞π‡∞ú ‡∞™‡±Å‡∞∞‡±Å‡∞ó‡±Å‡∞Æ‡∞Ç‡∞¶‡±Å‡∞≤‡±Å:",
        "chemical_pesticides": "‡∞∞‡∞∏‡∞æ‡∞Ø‡∞® ‡∞™‡±Å‡∞∞‡±Å‡∞ó‡±Å‡∞Æ‡∞Ç‡∞¶‡±Å‡∞≤‡±Å:",
        "environmental_factors": "‡∞∏‡∞∞‡±à‡∞® ‡∞™‡∞∞‡±ç‡∞Ø‡∞æ‡∞µ‡∞∞‡∞£ ‡∞ï‡∞æ‡∞∞‡∞ï‡∞æ‡∞≤‡±Å:",
        "precautions": "‡∞ú‡∞æ‡∞ó‡±ç‡∞∞‡∞§‡±ç‡∞§‡∞≤‡±Å:",
        "care_instructions": "‡∞∏‡∞Ç‡∞∞‡∞ï‡±ç‡∞∑‡∞£ ‡∞∏‡±Ç‡∞ö‡∞®‡∞≤‡±Å:",
        "visual_aids": "‡∞µ‡∞ø‡∞ú‡±Å‡∞µ‡∞≤‡±ç ‡∞é‡∞Ø‡∞ø‡∞°‡±ç‡∞∏‡±ç:",
        "youtube_videos": "‡∞ö‡∞ø‡∞ï‡∞ø‡∞§‡±ç‡∞∏ ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞®‡∞ø‡∞µ‡∞æ‡∞∞‡∞£ ‡∞ï‡±ã‡∞∏‡∞Ç ‡∞Ø‡±Ç‡∞ü‡±ç‡∞Ø‡±Ç‡∞¨‡±ç ‡∞µ‡±Ä‡∞°‡∞ø‡∞Ø‡±ã‡∞≤‡±Å:",
        "encouragement": "‡∞™‡±ç‡∞∞‡±ã‡∞§‡±ç‡∞∏‡∞æ‡∞π‡∞Ç ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞´‡∞æ‡∞≤‡±ã-‡∞Ö‡∞™‡±ç:"
    },
    "Hindi": {
        "title": "üå± ‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§ï‡•É‡§∑‡§ø ‡§ö‡•à‡§ü‡§¨‡•â‡§ü",
        "choose_language": "‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç",
        "choose_mode": "‡§Æ‡•ã‡§° ‡§ö‡•Å‡§®‡•á‡§Ç",
        "modes": ["‡§ï‡•É‡§∑‡§ø ‡§ö‡•à‡§ü", "‡§∞‡•ã‡§ó ‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§®‡•Å‡§Æ‡§æ‡§®"],
        "choose_topic": "‡§è‡§ï ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™ ‡§ö‡•Å‡§®‡•á‡§Ç",
        "sub_topics": {
            "‡§´‡§∏‡§≤ ‡§ï‡§ü‡§æ‡§à": ["‡§´‡§∏‡§≤ ‡§ï‡§ü‡§æ‡§à ‡§ï‡§æ ‡§∏‡§π‡•Ä ‡§∏‡§Æ‡§Ø", "‡§´‡§∏‡§≤ ‡§ï‡§ü‡§æ‡§à ‡§ï‡•á ‡§§‡§∞‡•Ä‡§ï‡•á", "‡§´‡§∏‡§≤ ‡§ï‡§ü‡§æ‡§à ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§®"],
            "‡§¨‡•Å‡§µ‡§æ‡§à": ["‡§¨‡•Ä‡§ú ‡§ö‡§Ø‡§®", "‡§¨‡•Å‡§µ‡§æ‡§à ‡§ï‡•á ‡§§‡§∞‡•Ä‡§ï‡•á", "‡§´‡§∏‡§≤ ‡§ö‡§ï‡•ç‡§∞"],
            "‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à": ["‡§°‡•ç‡§∞‡§ø‡§™ ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à", "‡§∏‡•ç‡§™‡•ç‡§∞‡§ø‡§Ç‡§ï‡§≤‡§∞ ‡§∏‡§ø‡§∏‡•ç‡§ü‡§Æ", "‡§ú‡§≤ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§®"],
            "‡§ï‡•Ä‡§ü ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§£": ["‡§ú‡•à‡§µ‡§ø‡§ï ‡§ï‡•Ä‡§ü ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§£", "‡§∞‡§æ‡§∏‡§æ‡§Ø‡§®‡§ø‡§ï ‡§ï‡•Ä‡§ü ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§£", "‡§∏‡§Æ‡§®‡•ç‡§µ‡§ø‡§§ ‡§ï‡•Ä‡§ü ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§®"],
            "‡§Æ‡•É‡§¶‡§æ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø": ["‡§Æ‡•É‡§¶‡§æ ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£", "‡§â‡§∞‡•ç‡§µ‡§∞‡§ï ‡§Ö‡§®‡•Å‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó", "‡§Æ‡•É‡§¶‡§æ ‡§∏‡§Ç‡§∞‡§ï‡•ç‡§∑‡§£"]
        },
        "input_label": "{} ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§ï‡•Å‡§õ ‡§≠‡•Ä ‡§™‡•Ç‡§õ‡•á‡§Ç:",
        "input_method_options": ["‡§Ö‡§™‡§®‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç", "‡§Ö‡§™‡§®‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§¨‡•ã‡§≤‡•á‡§Ç"],
        "submit_button": "‡§ú‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç",
        "audio_input_button": "‡§Ö‡§™‡§®‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§¨‡•ã‡§≤‡•á‡§Ç",
        "response_label": "‡§ö‡•à‡§ü‡§¨‡•â‡§ü ‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ:",
        "audio_output_button": "‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§∏‡•Å‡§®‡•á‡§Ç",
        "disease_prediction": "‡§™‡•å‡§ß ‡§∞‡•ã‡§ó ‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§®‡•Å‡§Æ‡§æ‡§®",
        "upload_image": "‡§Ö‡§™‡§®‡•Ä ‡§´‡§∏‡§≤/‡§™‡•å‡§ß‡•á ‡§ï‡•Ä ‡§§‡§∏‡•ç‡§µ‡•Ä‡§∞ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç",
        "predict_button": "‡§∞‡•ã‡§ó ‡§ï‡•Ä ‡§™‡§π‡§ö‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç",
        "crop_identification": "‡§´‡§∏‡§≤ ‡§™‡§π‡§ö‡§æ‡§®:",
        "disease_details": "‡§∞‡•ã‡§ó ‡§µ‡§ø‡§µ‡§∞‡§£:",
        "symptoms": "‡§≤‡§ï‡•ç‡§∑‡§£:",
        "cause": "‡§∞‡•ã‡§ó ‡§ï‡§æ ‡§ï‡§æ‡§∞‡§£:",
        "prevention": "‡§∞‡•ã‡§ï‡§•‡§æ‡§Æ ‡§â‡§™‡§æ‡§Ø:",
        "pesticides": "‡§ï‡•Ä‡§ü‡§®‡§æ‡§∂‡§ï/‡§´‡§Ç‡§ó‡•Ä‡§∏‡§æ‡§á‡§° ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂‡•á‡§Ç:",
        "natural_pesticides": "‡§™‡•ç‡§∞‡§æ‡§ï‡•É‡§§‡§ø‡§ï ‡§ï‡•Ä‡§ü‡§®‡§æ‡§∂‡§ï:",
        "chemical_pesticides": "‡§∞‡§æ‡§∏‡§æ‡§Ø‡§®‡§ø‡§ï ‡§ï‡•Ä‡§ü‡§®‡§æ‡§∂‡§ï:",
        "environmental_factors": "‡§â‡§™‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§™‡§∞‡•ç‡§Ø‡§æ‡§µ‡§∞‡§£‡•Ä‡§Ø ‡§ï‡§æ‡§∞‡§ï:",
        "precautions": "‡§∏‡§æ‡§µ‡§ß‡§æ‡§®‡§ø‡§Ø‡§æ‡§Ç:",
        "care_instructions": "‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤ ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂:",
        "visual_aids": "‡§µ‡§ø‡§ú‡•Å‡§Ö‡§≤ ‡§è‡§°‡•ç‡§∏:",
        "youtube_videos": "‡§â‡§™‡§ö‡§æ‡§∞ ‡§î‡§∞ ‡§∞‡•ã‡§ï‡§•‡§æ‡§Æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡•Ç‡§ü‡•ç‡§Ø‡•Ç‡§¨ ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã:",
        "encouragement": "‡§™‡•ç‡§∞‡•ã‡§§‡•ç‡§∏‡§æ‡§π‡§® ‡§î‡§∞ ‡§´‡•â‡§≤‡•ã-‡§Ö‡§™:"
    }
}

# Sidebar for language selection
st.sidebar.title(language_options["English"]["choose_language"])
language = st.sidebar.selectbox(
    "",
    ["English", "Telugu", "Hindi"]
)

# Update labels based on selected language
labels = language_options[language]

# Streamlit app title
st.title(labels["title"])

# Sidebar for mode selection
st.sidebar.title(labels["choose_mode"])
mode = st.sidebar.selectbox(
    "",
    labels["modes"]
)

# Function to get response from Gemini AI
def get_gemini_response(question, language):
    # Add language instruction to the prompt
    prompt = f"Respond in {language}: {question}"
    response = model.generate_content(prompt)
    return response.text

# Function to convert text to speech
def text_to_speech(text, language):
    tts = gTTS(text=text, lang='te' if language == "Telugu" else 'hi' if language == "Hindi" else 'en')
    tts.save("response.mp3")
    os.system("start response.mp3" if os.name == "nt" else "afplay response.mp3")

# Function to fetch YouTube videos
def fetch_youtube_videos(query, max_results=5):
    url = f"https://www.googleapis.com/youtube/v3/search?part=snippet&q={query}&key={YOUTUBE_API_KEY}&maxResults={max_results}"
    response = requests.get(url)
    if response.status_code == 200:
        videos = response.json().get("items", [])
        return videos
    else:
        st.error("Failed to fetch YouTube videos. Please check your API key or try again later.")
        return []

# Mock function for crop identification and disease prediction
def predict_disease(image):
    # Replace this with a real model for crop identification and disease prediction
    # For now, return mock results
    return "Tomato Plant", "Early Blight"

# Enhanced function for suggestions
def get_suggestions(crop, disease):
    suggestions = {
        "Tomato Plant": {
            "Early Blight": {
                "symptoms": "1. Brown spots on leaves.\n2. Yellowing of leaves.\n3. Wilting and defoliation.",
                "cause": "1. Fungal infection caused by Alternaria solani.\n2. High humidity and warm temperatures.\n3. Poor air circulation.",
                "prevention": "1. Rotate crops every 2-3 years.\n2. Avoid overhead watering.\n3. Use disease-resistant varieties.",
                "natural_pesticides": "1. Neem oil ‚Äì Effective against pests and fungal infections.\n2. Garlic spray ‚Äì Acts as a natural insect repellent.\n3. Baking soda spray ‚Äì Prevents fungal growth.",
                "chemical_pesticides": "1. Chlorothalonil ‚Äì Apply every 7-10 days.\n2. Mancozeb ‚Äì Apply as a preventive measure.",
                "environmental_factors": "1. Ideal temperature: 20-25¬∞C.\n2. Maintain soil pH between 6.0 and 7.0.\n3. Ensure proper spacing for air circulation.",
                "precautions": "1. Avoid overwatering.\n2. Remove infected leaves and debris.\n3. Ensure proper drainage.",
                "care_instructions": "1. Water deeply once a week.\n2. Apply balanced fertilizers.\n3. Monitor for early signs of disease.",
                "encouragement": "Your plant can recover with proper care! Stay consistent with the treatment."
            }
        }
    }
    return suggestions.get(crop, {}).get(disease, {
        "symptoms": "No specific symptoms available.",
        "cause": "No specific cause available.",
        "prevention": "No specific prevention measures available.",
        "natural_pesticides": "No specific natural pesticides recommended.",
        "chemical_pesticides": "No specific chemical pesticides recommended.",
        "environmental_factors": "No specific environmental factors available.",
        "precautions": "No specific precautions available.",
        "care_instructions": "No specific care instructions available.",
        "encouragement": "No specific encouragement message available."
    })

# Agriculture Chat Mode
if mode == labels["modes"][0]:  # Agriculture Chat
    st.sidebar.title(labels["choose_topic"])
    main_option = st.sidebar.selectbox(
        "",
        list(labels["sub_topics"].keys())
    )

    # Sub-options based on the main option
    sub_option = st.sidebar.selectbox(
        "",
        labels["sub_topics"][main_option]
    )

    # Main chat interface
    st.write(f"**‡∞Æ‡±Ä‡∞∞‡±Å ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±Å‡∞®‡±ç‡∞®‡∞¶‡∞ø:** {main_option} - {sub_option}" if language == "Telugu" else f"**‡§Ü‡§™‡§®‡•á ‡§ö‡•Å‡§®‡§æ:** {main_option} - {sub_option}" if language == "Hindi" else f"**You selected:** {main_option} - {sub_option}")

    # User input (text or audio)
    input_method = st.radio(
        labels["input_method_options"][0] + " / " + labels["input_method_options"][1],
        labels["input_method_options"],
        key="input_method"
    )

    user_input = ""
    if input_method == labels["input_method_options"][0]:  # Type your question
        user_input = st.text_input(labels["input_label"].format(sub_option), "")
    else:  # Speak your question
        if st.button(labels["audio_input_button"]):
            with sr.Microphone() as source:
                st.write("Listening...")
                audio = recognizer.listen(source)
                try:
                    user_input = recognizer.recognize_google(audio, language='te-IN' if language == "Telugu" else 'hi-IN' if language == "Hindi" else 'en-US')
                    st.write(f"**You said:** {user_input}")
                except sr.UnknownValueError:
                    st.error("Sorry, I could not understand the audio.")
                except sr.RequestError:
                    st.error("Could not request results; check your internet connection.")

    # Submit button
    if st.button(labels["submit_button"]):
        if user_input:
            question = f"{main_option} - {sub_option}: {user_input}"
            st.write(f"**‡∞Æ‡±Ä‡∞∞‡±Å ‡∞Ö‡∞°‡∞ø‡∞ó‡∞ø‡∞® ‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞®:** {user_input}" if language == "Telugu" else f"**‡§Ü‡§™‡§ï‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§®:** {user_input}" if language == "Hindi" else f"**You asked:** {user_input}")
            
            # Get response from Gemini AI
            try:
                response = get_gemini_response(question, language)
                st.write(f"**{labels['response_label']}**")
                st.write(response)

                # Audio output
                if st.button(labels["audio_output_button"]):
                    text_to_speech(response, language)
            except Exception as e:
                st.error(f"An error occurred: {e}")
        else:
            st.warning("Please enter or speak a question before submitting.")

# Disease Prediction Mode
elif mode == labels["modes"][1]:  # Disease Prediction
    st.sidebar.title(labels["disease_prediction"])
    uploaded_image = st.sidebar.file_uploader(labels["upload_image"], type=["jpg", "jpeg", "png"])

    # Display disease prediction results
    if uploaded_image is not None:
        image = Image.open(uploaded_image)
        st.image(image, caption="Uploaded Image", use_column_width=True)

        if st.sidebar.button(labels["predict_button"]):
            # Predict crop and disease
            crop, disease = predict_disease(image)
            st.write(f"**{labels['crop_identification']}** {crop}")
            st.write(f"**{labels['disease_details']}** {disease}")

            # Get suggestions
            suggestions = get_suggestions(crop, disease)
            st.write(f"**{labels['symptoms']}**\n{suggestions['symptoms']}")
            st.write(f"**{labels['cause']}**\n{suggestions['cause']}")
            st.write(f"**{labels['prevention']}**\n{suggestions['prevention']}")
            st.write(f"**{labels['natural_pesticides']}**\n{suggestions['natural_pesticides']}")
            st.write(f"**{labels['chemical_pesticides']}**\n{suggestions['chemical_pesticides']}")
            st.write(f"**{labels['environmental_factors']}**\n{suggestions['environmental_factors']}")
            st.write(f"**{labels['precautions']}**\n{suggestions['precautions']}")
            st.write(f"**{labels['care_instructions']}**\n{suggestions['care_instructions']}")
            st.write(f"**{labels['encouragement']}**\n{suggestions['encouragement']}")

            # Fetch YouTube videos
            query = f"{crop} {disease} treatment and prevention"
            videos = fetch_youtube_videos(query)
            if videos:
                st.write(f"**{labels['youtube_videos']}**")
                for video in videos:
                    st.write(f"[{video['snippet']['title']}](https://www.youtube.com/watch?v={video['id']['videoId']})")
